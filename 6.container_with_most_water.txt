6.container_with_most_water

You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.

Return the maximum amount of water a container can store.

Notice that you may not slant the container.

 

Example 1:


Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.
Example 2:

Input: height = [1,1]
Output: 1
 

class Solution {
    public int maxArea(int[] height) {
        int p1 = 0;  // Left pointer
        int p2 = height.length - 1;  // Right pointer
        int maxArea = 0;

        while (p1 < p2) {
            int area = Math.min(height[p1], height[p2]) * (p2 - p1);
            maxArea = Math.max(maxArea, area);

            // Move the pointer with the smaller height
            if (height[p1] < height[p2]) {
                p1++;
            } else {
                p2--;
            }
        }
        return maxArea;
    }

    public static void main(String[] args) {
        java.util.Scanner scanner = new java.util.Scanner(System.in);
        String[] input = scanner.nextLine().split(" "); // Space-separated integers
        int[] height = new int[input.length];
        
        for (int i = 0; i < input.length; i++) {
            height[i] = Integer.parseInt(input[i]); // Convert to integers
        }
        scanner.close();
        
        Solution sol = new Solution();
        System.out.println(sol.maxArea(height)); // Output result
    }
}
